{"version":3,"sources":["logo.svg","ToDoData.js","ToDoComponent.js","AddComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","todoData","description","ToDoComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","checked","handleChange","bind","assertThisInitialized","console","log","setState","prevState","_this2","react_default","a","createElement","class","style","textAlign","textDecoration","type","onChange","onClick","remove","color","fontSize","cursor","React","Component","AddComponent","id","value","handleClick","document","getElementById","App","todoList","map","todoItem","src_ToDoComponent","key","param","_this3","temp","findIndex","obj","window","alert","push","_this4","splice","className","src_AddComponent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCkBzBC,SAlBF,CACb,CACCC,YAAY,oBAEb,CACCA,YAAY,oBAEb,CACCA,YAAY,kBAEb,CACCA,YAAY,mBAEb,CACCA,YAAY,gCCiCEC,cA1Cd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QACKI,MAAM,CACVC,SAAQ,GAGTR,EAAKS,aAAaT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IANDA,8EAUjBY,QAAQC,IAAI,uBACZV,KAAKW,SACL,SAACC,GACA,MAAM,CACLP,SAAWO,EAAUP,uDASvBL,KAAKW,SACL,CACCN,SAAQ,qCAKF,IAAAQ,EAAAb,KAEN,OAAOc,EAAAC,EAAAC,cAAA,MAAIC,MAAM,mBAEfH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACC,UAAU,WAAWL,EAAAC,EAAAC,cAAA,QAAME,MAAQ,CAACE,eAAgBpB,KAAKI,MAAMC,QAAU,eAAiB,SAASS,EAAAC,EAAAC,cAAA,SAAOK,KAAK,WAAWhB,QAASL,KAAKI,MAAMC,QAASiB,SAAUtB,KAAKM,eAAkBN,KAAKJ,MAAMF,aAAmBoB,EAAAC,EAAAC,cAAA,QAAMO,QAAS,WAAOV,EAAKjB,MAAM4B,OAAOX,EAAKjB,MAAMF,cAAewB,MAAO,CAACO,MAAM,MAAOC,SAAS,OAAOC,OAAO,YAA9G,qBApC1MC,IAAMC,WCUnBC,qBAVd,SAAAA,IAAc,OAAAhC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,GAAAhC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,6EAMN,IAAAH,EAAAG,KACP,OAAOc,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,UAAU,WAAWL,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOH,MAAO,CAACS,OAAO,QAAQI,GAAG,YAAWjB,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASW,MAAM,WAAWd,MAAO,CAACS,OAAO,WAAWJ,QAAS,WAAO1B,EAAKD,MAAMqC,YAAYC,SAASC,eAAe,WAAWH,kBARlNJ,IAAMC,YCiElBO,cAzDd,SAAAA,IAAa,IAAAvC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACZvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,QACKI,MAAM,CACViC,SAAW,IAEZxC,EAAK2B,OAAO3B,EAAK2B,OAAOjB,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACZA,EAAKoC,YAAYpC,EAAKoC,YAAY1B,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IANLA,mFAQM,IAAAgB,EAAAb,KAClBA,KAAKW,SACL,CACC0B,SAAS5C,EAAS6C,IAAI,SAACC,GAAD,OAAczB,EAAAC,EAAAC,cAACwB,EAAD,CAAehB,OAAQX,EAAKW,OAASiB,IAAKF,EAAS7C,YAAaA,YAAa6C,EAAS7C,sDAKhHgD,GAAM,IAAAC,EAAA3C,KACb4C,EAAK,CAAClD,YAAYgD,IAC4C,GAA/DjD,EAASoD,UAAU,SAAAC,GAAG,OAAIA,EAAIpD,aAAakD,EAAKlD,cAElDqD,OAAOC,MAAM,wBAGbvD,EAASwD,KAAKL,GAEf5C,KAAKW,SAAS,CACb0B,SAAS5C,EAAS6C,IAAI,SAACC,GAAD,OAAczB,EAAAC,EAAAC,cAACwB,EAAD,CAAehB,OAAQmB,EAAKnB,OAASiB,IAAKF,EAAS7C,YAAaA,YAAa6C,EAAS7C,kBAG3He,QAAQC,IAAIjB,GACZyC,SAASC,eAAe,WAAWH,MAAM,kCAInCU,GAAM,IAAAQ,EAAAlD,KACZS,QAAQC,IAAIjB,GACZA,EAAS0D,OAAO1D,EAASoD,UAAW,SAAAC,GAAG,OAAIA,EAAIpD,aAAagD,IAAQ,GAEpE1C,KAAKW,SAAS,CACZ0B,SAAS5C,EAAS6C,IAAI,SAACC,GAAD,OAAczB,EAAAC,EAAAC,cAACwB,EAAD,CAAehB,OAAQ0B,EAAK1B,OAASiB,IAAKF,EAASR,GAAIrC,YAAa6C,EAAS7C,kBAEnHe,QAAQC,IAAIjB,oCAMX,OAAOqB,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,MAAIoC,UAAU,cACbpD,KAAKI,MAAMiC,UAEZvB,EAAAC,EAAAC,cAACqC,EAAD,CAAcpB,YAAajC,KAAKiC,sBApDjBL,IAAMC,WCGJyB,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c6357d0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var todoData=[\r\n{\t\r\n\tdescription:\"Buy 1kg Tomatoes\"\r\n},\r\n{\t\r\n\tdescription:\"Buy 1kg Potatoes\"\r\n},\r\n{\r\n\tdescription:\"Buy 2kg Onions\"\r\n},\r\n{\r\n\tdescription:\"Buy 2kg Chicken\"\r\n},\r\n{\t\r\n\tdescription:\"Get phone service recharge\"\r\n}\r\n]\r\n\r\nexport default todoData","import React from \"react\";\r\nimport todoData from \"./ToDoData\";\r\n\r\nclass ToDoComponent extends React.Component{\r\n\t\r\n\tconstructor(props){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\tchecked:false,\r\n\t\t\t\r\n\t\t}\r\n\t\tthis.handleChange=this.handleChange.bind(this);\r\n\t}\r\n\t\r\n\thandleChange(){\r\n\t\tconsole.log(\"handleChange called\");\r\n\t\tthis.setState(\r\n\t\t(prevState) => {\r\n\t\t\treturn{\r\n\t\t\t\tchecked: !(prevState.checked),\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t)\r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tthis.setState(\r\n\t\t{\r\n\t\t\tchecked:false,\r\n\t\t}\r\n\t\t)\r\n\t}\r\n\t\r\n\trender(){\r\n\t\t\r\n\t\t\treturn(<li class=\"list-group-item\"  >\r\n\t\t\t\r\n\t\t\t\t\t<p style={{textAlign:\"center\"}}><span style={ {textDecoration: this.state.checked ? 'line-through' : 'none'}}><input type=\"checkbox\" checked={this.state.checked} onChange={this.handleChange} \t/>{this.props.description}</span><span onClick={() => {this.props.remove(this.props.description)}} style={{color:\"red\", fontSize:\"24px\",cursor:\"pointer\"}}>&nbsp;&times;</span></p>\r\n\t\t\t\t\t\r\n\t\t\t\t   </li>);\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nexport default ToDoComponent;\r\n","import React from \"react\";\r\nimport todoData from \"./ToDoData\"\r\nclass AddComponent extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\trender(){\r\n\t\treturn(<div style={{textAlign:\"center\"}}><input type=\"text\" style={{cursor:\"text\"}}id=\"descTxt\"/><input type=\"button\" value=\"Add item\" style={{cursor:\"pointer\"}}onClick={() => {this.props.handleClick(document.getElementById(\"descTxt\").value)}} /></div>)\r\n\t}\r\n}\r\nexport default AddComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport ToDoComponent from \"./ToDoComponent\";\nimport './App.css';\nimport todoData from \"./ToDoData\";\nimport AddComponent from \"./AddComponent\";\n\n\n\nclass App extends React.Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\ttodoList : []\n\t\t}\n\t\tthis.remove=this.remove.bind(this);\n\t\tthis.handleClick=this.handleClick.bind(this);\n\t}\n\tcomponentDidMount(){\n\t\tthis.setState(\n\t\t{\n\t\t\ttodoList:todoData.map((todoItem) => <ToDoComponent remove={this.remove}  key={todoItem.description} description={todoItem.description}/>)\n\t\t}\n\t\t)\n\t}\n\t\n\thandleClick(param){\n\t\tvar temp={description:param};\n\t\tif(todoData.findIndex(obj => obj.description==temp.description)!=-1)\n\t\t{\n\t\t\twindow.alert(\"Item already exists!\");\n\t\t}\n\t\telse{\n\t\t\ttodoData.push(temp);\n\t\t}\n\t\tthis.setState({\n\t\t\ttodoList:todoData.map((todoItem) => <ToDoComponent remove={this.remove}  key={todoItem.description} description={todoItem.description}/>)\n\t\t\n\t\t});\n\t\tconsole.log(todoData);\n\t\tdocument.getElementById(\"descTxt\").value=\"\";\n\t\t\n\t}\n\t\t\n\tremove(param){\n\t\tconsole.log(todoData);\n\t\ttodoData.splice(todoData.findIndex( obj => obj.description==param\t),1);\n\t\t\n\t\tthis.setState({\n\t\t\t\ttodoList:todoData.map((todoItem) => <ToDoComponent remove={this.remove}  key={todoItem.id} description={todoItem.description}/>)\n\t\t});\n\t\tconsole.log(todoData);\n\t}\n  render() {\n\t \n\t\t\n\t\t\n\t  return(<div >\n\t  <ul className=\"list-group\">\n\t  {this.state.todoList}\n\t   </ul>\n\t  <AddComponent handleClick={this.handleClick}/>\n\t \n\t  </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}